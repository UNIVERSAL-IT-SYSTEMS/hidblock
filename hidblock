#! /bin/sh

HELP="This script adds rules to your /etc/udev/rules.d/ folder that disable\n
new USB HID's from attaching to your computer. New USB mice and keyboards\n
will not work until you disable the rules. This should prevent USB devices \n
from impersonating Human Interface Devices in order to prevent BadUSB attacks.\n
\n
usage:\n
\t	./hidblock < block || b > = Block all new USB Human Interface Devices\n
\t	./hidblock < unblock || u > = Unblock new USB Human Interface Devices\n
\t	./hidblock < install || i > = Install(or reinstall over) the rules file\n

file location:\n
\t 	/etc/udev/rules.d/10-usbblock.rules

rule contents(10-usbblock.rules):\n
\t	#ACTION==\"add\", ATTR{bInterfaceClass}==\"03\" 
	RUN+=\"/bin/sh -c 'echo 0 >/sys\$DEVPATH/../authorized'\"\n
"

#Generate the rules file for blocking USB HID's.
#echo rule file into place /etc/udev/rules.d/10-usbblock.rules

installrule () {
	if [ "/etc/udev/rules.d/10-usbblock.rules" -e ]
	then
		echo "Rules file available"
	else
		echo "Generating the new USB HID rules file."
		RULEFILE="#ACTION==\"add\", ATTR{bInterfaceClass}==\"03\""
		RULEFILE="$RULEFILE RUN+=\"/bin/sh -c "
		RULEFILE="$RULEFILE 'echo 0 >/sys\$DEVPATH/../authorized'\""
		echo $RULEFILE | sudo tee /etc/udev/rules.d/10-usbblock.rules
	fi
}

#Enable USB HID Blocking rules(Block new USB HID's)
block () {
	#Uncomment out rules line then
	#Restart the udev service
        cat /etc/udev/rules.d/10-usbblock.rules | grep -v "#" && \
	sudo sed -i 's/#//' /etc/udev/rules.d/10-usbblock.rules && \
	sudo udevadm control --reload-rules
}

#Disable USB HID Blocking rules(Unblock new USB HID's)
unblock () {
	#Comment out rules line then
	#Restart the udev service
        cat /etc/udev/rules.d/10-usbblock.rules | grep "#" && \
	sudo sed -i 's/^/#/' /etc/udev/rules.d/10-usbblock.rules && \
	sudo udevadm control --reload-rules
}

if [ "$1" = "unblock" ]; then
	unblock
elif [ "$1" = "block" ]; then
	block
elif [ "$1" = "b" ]; then
        block
elif [ "$1" = "u" ]; then
        unblock
elif [ "$1" = "install" ]; then
	installrule
elif [ "$1" = "i" ]; then
	installrule
else
	echo -e $HELP
fi

# You can use this function to watch for your screensaver state to change and
# enable hidblock blocking when it goes blank or locks, and unblocks it when you
# unlock the screensaver. This is to prevent BadUSB attacks being used to pilfer
# encryption keys when an attacker has local access by posing as human 
# interfaces. You can source this into rc.local and call this function to have
# it run automatically. I'm pretty sure.

hidblock_watch_xscreensaver(){
    if [ -f "/usr/bin/srm" ]; then
        alias rm=srm
    fi
    HIDBLOCK_XSCREEN_UNLOCK="true"
    if [ -f /etc/hidblockrc ]; then
        . /etc/hidblockrc
    fi
    mkdir -p "$HOME/.config/hidblock/tmp"
    echo true > "$HOME/.config/hidblock/tmp/hidwatch"
    while $(<"$HOME/.config/hidblock/tmp/hidwatch"); do
        HIDWATCH_XSCREEN=$(<"$HOME/.config/hidblock/tmp/hidwatch")
        case "`xscreensaver-command -time | egrep -o ' blanked|non-blanked|locked'`" in
            "blanked")     [ $LAST != "blank" ] && block && LAST="blank" ;;
            "non-blanked")  [ $LAST != "unblank" ] && [ $HIDBLOCK_XSCREEN_UNLOCK == "true"] && unblock && LAST="unblank" ;;
            "locked")       [ $LAST != "lock" ] && block && LAST="lock" ;;
        esac
    sleep 5
    done
    echo false > "$HOME/.config/hidblock/tmp/hidwatch"
}
